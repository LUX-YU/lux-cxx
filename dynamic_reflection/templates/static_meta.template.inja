#pragma once
#include <array>
#include <cstddef>
#include <tuple>
#include <string_view>
#include <type_traits>

namespace lux::cxx::dref{

    {% for decl_index in marked_declarations -%}{% set decl=decl_from_index(decl_index) %}{% set type=type_from_id(decl.type_id) %}{%if decl.__kind=="CXXRecordDecl" %}
    template<>
    class type_meta<{{ decl.fq_name }}>
    {
    public:
        using type = {{ decl.fq_name }};
        static constexpr size_t size = {{ type.size }};
        static constexpr size_t align = {{ type.align }};
        static constexpr string_view full_qualified_name = "{{ decl.fq_name }}";
        static constexpr string_view name = "{{ decl.name }}";
        static constexpr bool is_abstract = {{ decl.is_abstract }};

        using field_types = std::tuple<
            {% for field_id in decl.field_decls -%}{%- set field_decl=decl_from_id(field_id) -%}
            {{ field_decl.type_id }} {% if not loop.is_last %},
            {% endif %}{% endfor %}
        >;
    };
    {% endif %}{% endfor %}

} // namespace lux::cxx::dref